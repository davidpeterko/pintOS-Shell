################
YOUR INFO
################
Name1: David Ko	
EID1: dpk326
CS login: davidko
Email: davidpeterko@gmail.com
Unique Number: 53025

Slip days used: 0

****EACH student submits a (unique) design document.****

################
YOUR PARTNER'S INFO
################
Name1: Cameron Hooper
EID1: cdh2587
CS login: chooper9
Email: cdhooper912@gmail.com
Unique Number: 53010

Your partner's ranking (scale below): Excellent

################
PARTNER EVALUATION SCALE
################
Excellent: Consistently went above and beyond - tutored others, carried
more than his/her fair share of the load.

Very Good: Consistently did what he/she was supposed to do, very well
prepared and cooperative.

Satisfactory: Usually did what he/she was supposed to do, minimally
prepared and cooperative.

Marginal: Sometimes failed to show up and/or rarely prepared.

Deficient: Often failed to show up and/or rarely prepared.

Unsatisfactory: Consistently failed to show up and/or unprepared.

Superficial: Practically no participation.

No Show: No participation at all.

################
Preliminaries
################
(1) If you have any preliminary comments on your submission, notes for
  the TAs, or extra credit, please give them here.

(2) Please cite any offline or online sources you consulted while
  preparing your submission, other than the Linux documentation,
  course text, and lecture notes.
	
	We used a C reference library to help understand certain functions with examples:
	www.tutorialspoint.com

################
Questions regarding Part 0
################
(1) How many child processes are created when doFib() begins with
  an input of 5?  Show the return value for each child process, numbering
  the processes beginning with 0 (the original process) and incrementing for
  each child process.
  
14 child processes. 
0. 5 (parent process) 
1. 3
2. 2
3. 1
4. 2
5. 1
6. 0
7. 1
8. 1
9. 0
10. 1
11. 0
12. 1
13. 1
14. 1


(2) In part 0.3, which flavor of exec did you choose to use? Why? 

We used execve so that we could specify the arguments and environment.

################
Questions regarding Part 1
################
(1) In the provided utility function Signal(), what does the call to
  sigaction() do?  Why was sigaction() used instead of signal()?
  
sigaction ensures you only recieved one signal at a time, since it blocks the rest.

(2) What is the last assembly language instruction executed by the
  signal handler function that you write?  (You may choose either signal
  handler.)

   The last assembly language instruction executed was retq.

(3) After the instruction identified in the previous question executes, 
  what is the next assembly language instruction executed?
	
	0x00007ffff7a51150 <+0>:	mov    $0xf,%rax
	

(4) When the signal handler finishes running, it must restore all of
  the registers from the interrupted thread to exactly their values
  before the signal occurred. How is this done?

   0x00007ffff7a51150 <+0>:	mov    $0xf,%rax
   0x00007ffff7a51157 <+7>:	syscall 
   0x00007ffff7a51159 <+9>:	nopl   0x0(%rax)

	Explanation: using the function __restore_rt.

################
Questions regarding Part 2
################
(1) In msh.c, we use three separate signal handlers to catch our signals. 
  You can also use a single signal handler to catch all three signals.  Is
  there a design advantage of one over the other?  Explain your answer.

	It will be alot easier to debug the code if you have 3 separate handlers instead of just one signal handler to catch all the signals. In addition to readability, having one handler consolidating 3 handlers will make the function too "crowded." By design, having 3 separate handlers will allow you to check for the individual signals as they pass through the functions one by one rather than go into one function.

